#include <iostream>
#include <cstdlib>
#include <ctime>
#include <vector>

using namespace std;

// Function to partition the array and return the index of the pivot element
int partition(vector<int> &arr, int low, int high) {
    int pivot = arr[low];
    int i = low + 1;
    int j = high;

    while (i<=j) {
        while (arr[i] <= pivot) {
            i++;
        }

        while (arr[j] > pivot) {
            j--;
        }

        if (i <= j) {
            swap(arr[i], arr[j]);
        }
    }

    swap(arr[low], arr[j]);
    return j;
}

// Deterministic QuickSort
void deterministicQuickSort(vector<int> &arr, int low, int high) {
    if (low < high) {
        int pivotIndex = partition(arr, low, high);

        deterministicQuickSort(arr, low, pivotIndex - 1);
        deterministicQuickSort(arr, pivotIndex + 1, high);
    }
}

// Randomized QuickSort
void randomizedQuickSort(vector<int> &arr, int low, int high) {
    if (low < high) {
        // Randomly choose pivot and swap with the first element
        int randomIndex = low + rand() % (high - low + 1);
        swap(arr[low], arr[randomIndex]);

        int pivotIndex = partition(arr, low, high);

        randomizedQuickSort(arr, low, pivotIndex - 1);
        randomizedQuickSort(arr, pivotIndex + 1, high);
    }
}

int main() {
    srand(time(0)); // Seed for random number generation

    // Example usage
    vector<int> arr = {12, 4, -12, 5, 6, 7, 3, -8, 1, 15};

    cout << "Original array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    // Applying Deterministic QuickSort
    deterministicQuickSort(arr, 0, arr.size() - 1);
    cout << "Array after deterministic QuickSort: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    // Re-initialize the array
    arr = {12, 4, -12, 5, 6, 7, 3, -8, 1, 15};

    // Applying Randomized QuickSort
    randomizedQuickSort(arr, 0, arr.size() - 1);
    cout << "Array after randomized QuickSort: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}

// Best Case Time Complexity: O(n log n)
// Average Case Time Complexity: O(n log n)
// Worst Case Time Complexity: O(n^2) (with a low probability due to the randomized variant)
// Space Complexity: O(1) +  O(log n) -> recursive stack

// 1. srand(time(0)); // Seed for random number generation
// srand stands for "seed random." It's a function in C++ that seeds the random number generator (rand()). 
// The seed is a starting point for the sequence of pseudo-random numbers generated by rand().

// time(0) returns the current time in seconds since the epoch (January 1, 1970). 
// By using the current time as the seed, you introduce an element of randomness into the seed value, 
// making the sequence of random numbers less predictable.

// The purpose of seeding the random number generator with the current time is to ensure that each time you run the program, 
// you get a different sequence of random numbers. If you don't seed the random number generator or if you use the same seed, 
// you'll get the same sequence of random numbers every time you run the program.

// 2. int randomIndex = low + rand() % (high - low + 1);
// rand() is a function in C++ that generates a pseudo-random integer between 0 and RAND_MAX. 
// However, the distribution of numbers might not be uniformly random, 
// and the sequence of numbers will be the same each time you run the program unless you seed the random number generator.

// (high - low + 1) represents the range of indices (inclusive) from low to high in the array. 
// Adding 1 accounts for the fact that we want to include both low and high in the range.

// rand() % (high - low + 1) gives a random number within the specified range.

// Finally, low + rand() % (high - low + 1) calculates a random index within the range [low, high].

// The combination of srand(time(0)) and the calculation of randomIndex ensures that 
// the random number generation in your program is initialized with a somewhat unpredictable seed and 
// then used to get a random index within a specified range. 
// This is often used in algorithms like the randomized QuickSort to introduce randomness in the selection of a pivot element, 
// making the algorithm less susceptible to worst-case scenarios.